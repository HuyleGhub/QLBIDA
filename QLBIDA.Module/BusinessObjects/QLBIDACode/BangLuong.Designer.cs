//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace QLBIDA.Module.BusinessObjects.QLBIDA
{

    public partial class BangLuong : DevExpress.Persistent.BaseImpl.BaseObject
    {
        NhanVien fNhanVienID;
        [Association(@"BangLuongReferencesNhanVien")]
        public NhanVien NhanVienID
        {
            get { return fNhanVienID; }
            set
            {
                SetPropertyValue<NhanVien>(nameof(NhanVienID), ref fNhanVienID, value);
                if (!IsLoading && value != null)
                {
                    // Automatically set base salary from NhanVien when assigned
                    luongCoBan = value.mucLuong;
                }
            }
        }
        string fnam;
        public string nam
        {
            get { return fnam; }
            set { SetPropertyValue<string>(nameof(nam), ref fnam, value); }
        }
        string fthang;
        public string thang
        {
            get { return fthang; }
            set { SetPropertyValue<string>(nameof(thang), ref fthang, value); }
        }

        decimal fsoGioLamViec;
        [DevExpress.ExpressApp.Model.ModelDefault("DisplayFormat", "### ### ### ###")]
        public decimal soGioLamViec
        {
            get
            {
                // Calculate total working hours from ChamCong records
                if (NhanVienID != null)
                {
                    fsoGioLamViec = CalculateTotalWorkingHours();
                }
                return fsoGioLamViec;
            }
            set { SetPropertyValue<decimal>(nameof(soGioLamViec), ref fsoGioLamViec, value); }
        }

       



        decimal fluongCoBan;
        [DevExpress.ExpressApp.Model.ModelDefault("DisplayFormat", "### ### ### ###"),
        DevExpress.ExpressApp.Model.ModelDefault("EditMask", "### ### ### ###")]
        public decimal luongCoBan
        {
            get { return fluongCoBan; }
            set { SetPropertyValue<decimal>(nameof(luongCoBan), ref fluongCoBan, value); }
        }

        decimal fphuCap;
        [DevExpress.ExpressApp.Model.ModelDefault("DisplayFormat", "### ### ### ###"),
        DevExpress.ExpressApp.Model.ModelDefault("EditMask", "### ### ### ###")]
        public decimal phuCap
        {
            get { return fphuCap; }
            set { SetPropertyValue<decimal>(nameof(phuCap), ref fphuCap, value); }
        }

        decimal fluong;
        [DevExpress.ExpressApp.Model.ModelDefault("DisplayFormat", "### ### ### ###"),
        DevExpress.ExpressApp.Model.ModelDefault("EditMask", "### ### ### ###")]
        public decimal luong
        {
            get
            {
                // Tính lại tổng lương mỗi khi truy xuất
                fluong = CalculateTotalSalary();
                return fluong;
            }
            set { SetPropertyValue<decimal>(nameof(luong), ref fluong, value); }
        }
        // Hàm tính tổng số giờ làm việc
        private decimal CalculateTotalWorkingHours()
        {
            // Lọc bản ghi chấm công theo tháng và năm
            var chamCongRecords = NhanVienID.ChamCongs
                .Where(cc => cc.gioVao.Year.ToString() == nam &&
                             cc.gioVao.Month.ToString() == thang)
                .ToList();

            // Tính tổng số giờ làm việc
            return (decimal)chamCongRecords.Sum(cc => cc.TongGioLamViec.TotalHours);
        }

        private decimal CalculateTotalSalary()
        {
            // Lương cơ bản từ mức lương nhân viên
            decimal baseSalary = luongCoBan;

            // Số giờ làm việc chuẩn
            decimal standardHours = 160;

            // Tính lương làm thêm
            decimal overtimeRate = luongCoBan / standardHours * 1.5m;
            decimal overtimeHours = Math.Max(0, soGioLamViec - standardHours);
            decimal overtimePay = overtimeHours * overtimeRate;

            // Phụ cấp
            decimal allowance = phuCap > 0 ? phuCap : baseSalary * 0.1m;

            // Tính tổng lương
            return baseSalary + allowance + overtimePay;
        }

    }

}